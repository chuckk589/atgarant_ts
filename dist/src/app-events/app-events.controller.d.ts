import { Bot } from 'grammy';
import { AppConfigService } from 'src/app-config/app-config.service';
import { Offers } from 'src/mikroorm/entities/Offers';
import { ArbModeratorReview, BasePaymentController, BotContext } from 'src/types/interfaces';
import { AppEventsService } from './app-events.service';
import { offerController } from 'src/bot/offer-menu/offer.controller';
import { PinoLogger } from 'nestjs-pino';
import { TelegramGateway } from 'src/telegram/telegram.gateway';
import { ReviewsRate } from 'src/mikroorm/entities/Reviews';
import { Arbitraries, ArbitrariesStatus } from 'src/mikroorm/entities/Arbitraries';
import { Offerstatuses } from 'src/mikroorm/entities/Offerstatuses';
export declare class AppEventsController {
    private readonly appEventsService;
    private readonly appConfigService;
    private readonly offerController;
    private readonly TelegramGateway;
    private bot;
    private readonly logger;
    private PaymentController;
    constructor(appEventsService: AppEventsService, appConfigService: AppConfigService, offerController: offerController, TelegramGateway: TelegramGateway, bot: Bot<BotContext>, logger: PinoLogger, PaymentController: BasePaymentController);
    arbOpened<T = Offers | number>(offer: T, reason: string, issuerChatId: number): Promise<Offerstatuses>;
    arbClosed<T = Arbitraries | number>(arb: T, modReview: ArbModeratorReview): Promise<ArbitrariesStatus>;
    arbDisputed<T = Arbitraries | number>(arb: T, issuerChatId: number): Promise<ArbitrariesStatus>;
    offerPayoutProcessed(txn_id: string): Promise<void>;
    offerPayed(txn_id: string): Promise<void>;
    offerShipped<T = Offers | number>(offer: T): Promise<Offerstatuses>;
    offerFeedback<T = Offers | number>(offer: T, feedback: string, issuerChatId: number, rate: ReviewsRate): Promise<void>;
    offerArrived<T = Offers | number>(offer: T): Promise<Offerstatuses>;
    offerPaymentRequested<T = Offers | number>(offer: T): Promise<Offerstatuses>;
    offerRejectInitiated(payload: any, ctx: BotContext): Promise<void>;
    offerEditInitiated(payload: any, ctx: BotContext): Promise<void>;
    offerAccepted(payload: any): Promise<void>;
    offerCreated<T = Offers | number>(offer: T, from: string): Promise<void>;
}
